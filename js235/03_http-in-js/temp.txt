This flowchart outlines the basics of a cross-origin request.  Some situations may be more complex than this one. 

1. human user visits website with web browser, browser does stuff on behalf of the human 

2. a client-side script requests a resource from a different origin? yes? proceed to 3.  no? proceed to 99.

3. Server responds with a 2xx status and a response payload? Yes? Proceed to 4.  No? Proceed to 99.

4. Browser processes response.  The response contains an `Access-Control-Allow-Origin` header that matches the request origin? (the origin that the browser made the request from)? Yes? Proceed to 5. No? Proceed to 6.

5. Success! The browser is satisfied that the response payload can be safely shared with the script (the `fetch` request). You're done!

6. Uh oh! Browser notices that something may be wrong.  An error is logged to the console, but no error is thrown in JS.  The request body is simply withheld from JS without any explanation. You're done!

99. No need for CORS. You're done!  That was easy! 