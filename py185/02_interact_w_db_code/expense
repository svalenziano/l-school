#!/usr/bin/env python

from datetime import date
from textwrap import dedent
import sys
from contextlib import contextmanager

import psycopg2
from psycopg2 import extras



class ExpenseData:
    
    @contextmanager
    def _database_connect(self):
        try:
            with psycopg2.connect(dbname='expenses') as con:
                with con.cursor(cursor_factory=extras.DictCursor) as cur:
                    yield cur
        finally:
            con.close()
    
    def _display_expenses(self, query_result:extras.DictCursor):
        '''
        Input: Query results from 'expenses' table via cursor.fetchall()
        Output: Print the expenses
        '''
        for expense in query_result:
            columns = [
                str(expense["id"]).rjust(3),
                str(expense["created_on"]),
                str(expense["amount"]).rjust(12),
                str(expense["memo"])
            ]
            print(" | ".join(columns))

    
    def list_expenses(self):
        with self._database_connect() as cursor:
            cursor.execute("SELECT * FROM expenses ORDER BY created_on ASC")
            result = cursor.fetchall()
        self._display_expenses(result)
        

    def add_expense(self, amount, memo):
        with self._database_connect() as cursor:
            cursor.execute(
                """
                    INSERT INTO expenses
                    (amount, memo, created_on)
                    VALUES
                    (%s, %s, %s)
                """,
                (amount, memo, date.today())
            )

    def search_expenses(self, search_string:str):
        '''
        Execute SELECT query with ILIKE, print results
        '''
        # breakpoint()
        with self._database_connect() as cur:
            cur.execute(
                '''
                SELECT * FROM expenses
                    WHERE memo ILIKE %s
                    ORDER BY id
                ''',
            ('%' + search_string + '%',))

            result = cur.fetchall()
            if result:
                self._display_expenses(result)
            else:
                print(f"No results for search '{search_string}'")

class CLI:
    def __init__(self):
        self.application = ExpenseData()

    def run(self, arguments):
        if not arguments:
            command = None
        else:
            command = arguments.pop(0)

        match command:
            case "add":
                if len(arguments) < 2:
                    print("You must provide an amount and memo.")
                    return
                amount, memo = arguments
                self.application.add_expense(amount, memo)
            case "list":
                self.application.list_expenses()
            case "search":
                try:
                    if len(arguments) != 1:
                        raise IndexError
                    self.application.search_expenses(arguments[0])
                except IndexError:
                    print("Expected invalid QUERY argument for 'search'")
            case _:
                self.display_help()

    def display_help(self):
        print(dedent("""
            An expense recording system

            Commands:

            add AMOUNT MEMO - record a new expense
            clear - delete all expenses
            list - list all expenses
            delete NUMBER - remove expense with id NUMBER
            search QUERY - list expenses with a matching memo field
        """).strip("\n"))

if __name__ == "__main__":
    cli = CLI()
    cli.run(sys.argv[1:])