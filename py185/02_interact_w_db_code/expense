#!/usr/bin/env python

from datetime import date
from textwrap import dedent
import sys
from contextlib import contextmanager

import psycopg2
from psycopg2 import extras



class ExpenseData:
    
    def __init__(self):
        self._setup_schema()

    @contextmanager
    def _database_connect(self):
        try:
            with psycopg2.connect(dbname='expenses') as con:
                with con.cursor(cursor_factory=extras.DictCursor) as cursor:
                    yield cursor
        finally:
            con.commit()
            con.close()
    
    def _setup_schema(self):
        with self._database_connect() as cursor:
            cursor.execute("""
                SELECT count(*) FROM information_schema.tables
                    WHERE table_schema = 'public'
                        AND table_name = 'expenses'
                           """)
            result = cursor.fetchone()
            if result[0] == 0:
                cursor.execute("""
                    CREATE TABLE expenses (
                    id serial PRIMARY KEY,
                    amount numeric(6,2) NOT NULL,
                    memo text NOT NULL,
                    created_on date NOT NULL,
                    CONSTRAINT non_negative CHECK ((amount > 0.01))
                    ); 
                    """)
                
                               


    def _display_with_meta(self, query_result:extras.DictCursor):
        '''
        Display result along with count and total
        '''
        lines = len(query_result)
        if lines < 1:
            print("No results to display!")
        if lines == 1:
            self._display_count(1)
            self._display_expenses(query_result)
        elif lines > 1:
            total = sum(float(row['amount']) for row in query_result)
            self._display_count(len(query_result))
            self._display_expenses(query_result)
            self._display_total(total)


    def _display_expenses(self, query_result:extras.DictCursor):
        '''
        Input: Query results from 'expenses' table via cursor.fetchall()
        Output: Print the expenses
        '''
        for expense in query_result:
            columns = [
                str(expense["id"]).rjust(3),
                str(expense["created_on"]),
                str(expense["amount"]).rjust(12),
                str(expense["memo"])
            ]
            print(" | ".join(columns))

    def _display_count(self, count:int):
        match count:
            case 0:
                print("There are no expenses.")
            case 1:
                print("There is 1 expense.")
            case _:
                print(f'There are {count} expenses.')

    def _display_total(self, total:float):
        print("-" * 50) 
        print(f"Total" + str(total).rjust(26))
    
    def list_expenses(self):
        with self._database_connect() as cursor:
            cursor.execute("SELECT * FROM expenses ORDER BY created_on ASC")
            result = cursor.fetchall()
        self._display_with_meta(result)
        
        
    
    def insert_dummy_data(self):
        with self._database_connect() as cursor:
            try:
                cursor.execute("""
        INSERT INTO expenses VALUES (9, 1.99, 'Chewing gum', '2025-01-03');
        INSERT INTO expenses VALUES (10, 1600.00, 'Surly LHT', '2025-01-03');
        INSERT INTO expenses VALUES (12, 32.45, 'Wicked Tix', '2025-01-03');
        INSERT INTO expenses VALUES (13, 32.45, 'Hose reel', '2025-01-03');
        INSERT INTO expenses VALUES (15, 1.99, 'Chewing gum', '2025-01-03');
        INSERT INTO expenses VALUES (16, 1.00, 'Great_stuff', '2025-01-03');
        INSERT INTO expenses VALUES (17, 20.00, 'Toxic foam', '2025-01-03');
        INSERT INTO expenses VALUES (18, 5.99, 'Broccoli', '2025-01-03');
        INSERT INTO expenses VALUES (21, 99.99, 'mktg stuff', '2025-01-06');
        INSERT INTO expenses VALUES (22, 6.99, 'hi there', '2025-01-06');
        """)
                print("Dummy data inserted.")
            except psycopg2.errors.UniqueViolation:
                print("Error.  Values already exist.  Must 'clear' first.")
    

    def add_expense(self, amount, memo):
        with self._database_connect() as cursor:
            cursor.execute(
                """
                    INSERT INTO expenses
                    (amount, memo, created_on)
                    VALUES
                    (%s, %s, %s)
                """,
                (amount, memo, date.today())
            )

    def search_expenses(self, search_string:str):
        '''
        Execute SELECT query with ILIKE, print results
        '''
        # breakpoint()
        with self._database_connect() as cur:
            cur.execute(
                '''
                SELECT * FROM expenses
                    WHERE memo ILIKE %s
                    ORDER BY id
                ''',
            ('%' + search_string + '%',))

            result = cur.fetchall()
            if result:
                self._display_with_meta(result)
            else:
                print(f"No results for search '{search_string}'")

    def delete_expense(self, id:int):
        with self._database_connect() as cursor:
            cursor.execute("SELECT * FROM expenses WHERE id=%s", (id,))
            result = cursor.fetchall()
            if result:
                cursor.execute("DELETE FROM expenses WHERE id=%s", (id,))
                print("Deleted:")
                self._display_expenses(result)
            else:
                print(f"Expense with id={id} not found.  Nothing done.")

    def delete_all_expenses(self):
        with self._database_connect() as cursor:
            cursor.execute("DELETE FROM expenses")
        print("All expenses have been deleted.")

class CLI:
    def __init__(self):
        self.application = ExpenseData()

    def run(self, arguments):
        if not arguments:
            command = None
        else:
            command = arguments.pop(0)

        match command:
            case "add":
                if len(arguments) < 2:
                    print("You must provide an amount and memo.")
                    return
                amount, memo = arguments
                self.application.add_expense(amount, memo)
            case "list":
                self.application.list_expenses()
            case "search":
                try:
                    if len(arguments) != 1:
                        raise IndexError
                    self.application.search_expenses(arguments[0])
                except IndexError:
                    print("Invalid QUERY argument for 'search'")
            case ("del" | "delete"):
                try:
                    if len(arguments) != 1:
                        raise IndexError
                    self.application.delete_expense(arguments[0])
                except IndexError:
                    print("Invalid 'id NUMBER' argument for 'del' (delete)")
            case "clear":
                try:
                    if len(arguments) != 0:
                        raise IndexError
                    else:
                        confirm = input("This will remove all expenses. " +
                                "Are you sure? (enter y to confirm) ")
                        if confirm in ('y', 'Y'):
                            self.application.delete_all_expenses()
                except IndexError:
                    print("Clear doesn't take any arguments,\
                         did you mean 'del'?")
            case "dummy":
                if len(arguments) == 0:
                    self.application.insert_dummy_data()
                else:
                    "'Dummy' command doesn't take any arugments!"
            case _:
                self.display_help()

    def display_help(self):
        print(dedent("""
            An expense recording system

            Commands:

            add AMOUNT MEMO - record a new expense
            clear - delete all expenses
            list - list all expenses
            delete NUMBER - remove expense with id NUMBER
            search QUERY - list expenses with a matching memo field
            dummy - populate with dummy data
        """).strip("\n"))

if __name__ == "__main__":
    cli = CLI()
    cli.run(sys.argv[1:])